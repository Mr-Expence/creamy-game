{
  "README.md": " \n\n\n> Open this page at [https://meeeeeeeep1.github.io/info-plus/](https://meeeeeeeep1.github.io/info-plus/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://arcade.makecode.com/](https://arcade.makecode.com/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/meeeeeeeep1/info-plus** and import\n\n## Edit this project ![Build status badge](https://github.com/meeeeeeeep1/info-plus/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://arcade.makecode.com/](https://arcade.makecode.com/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/meeeeeeeep1/info-plus** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/meeeeeeeep1/info-plus/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/arcade\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n",
  "assets.json": "",
  "images.g.jres": "{\n    \"image1\": {\n        \"data\": \"hwQIAAgAAAC/u7sLv7u7u/+7/7v7//C7u7v/u7u7/7u7u/u/u7u7vw==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}",
  "images.g.ts": "// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"myImage\":return img`\nf f f b b b b b \nb b f f b b b b \nb b b f b b b b \nb b b f b b b b \nb b f . f f b b \nb b f f f f f b \nb b b b b b f f \n. b b b b b b b \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n",
  "infoPlus.ts": "//% groups=['Style']\n//% blockGap=8\nnamespace info.plus {\n    /**\n     * Sets life icon\n     * @param new life icon\n     */\n    //% block=\"set life image to $lifeImage\"\n    //% lifeImage.shadow=screen_image_picker\n    //% group=\"Life\"\n    //% lifeImage.defl=image.create(8, 8)\n    export function setLifeIcon(lifeImage: Image): void {\n        info.setLifeImage(lifeImage)\n    }\n    /**\n     * Sets life border color\n     * @param border color\n     */\n    //% block=\"set border color to $borderColor\"\n    //% borderColor.shadow=\"colorindexpicker\"\n    //% group=\"Style\"\n    //% textColor.defl=3\n    export function setInfoBorderColor(borderColor: number): void {\n        info.setBorderColor(borderColor)\n    }\n\n    /**\n    * Sets life background color\n    * @param background color\n    */\n    //% block=\"set background color to $bgColor\"\n    //% bgColor.shadow=\"colorindexpicker\"\n    //% group=\"Style\"\n    //% textColor.defl=1\n    export function setInfoBackgroundColor(bgColor: number): void {\n        info.setBackgroundColor(bgColor)\n    }\n\n    /**\n    * Sets life text color\n    * @param text color\n    */\n    //% block=\"set text color to $textColor\"\n    //% textColor.shadow=\"colorindexpicker\"\n    //% group=\"Style\"\n    //% textColor.defl=3\n    export function setTextColor(textColor: number): void {\n        info.setFontColor(textColor)\n    }\n\n    /**\n    * Returns the info border color\n    */\n    //% block=\"border color\"\n    //% group=\"Style\"\n    export function borderColor(): number {\n        return info.borderColor()\n    }\n\n    /**\n    * Returns the info background color\n    */\n    //% block=\"background color\"\n    //% group=\"Style\"\n    export function backgroundColor(): number {\n        return info.backgroundColor()\n    }\n\n    /**\n    * Returns the info text color\n    */\n    //% block=\"text color\"\n    //% group=\"Style\"\n    export function textColor(): number {\n        return info.fontColor()\n    }\n\n    /**\n* Turns the score on/off\n*/\n    //% block=\"turn score $on\"\n    //% group=\"Score\"\n    //% on.shadow=\"toggleOnOff\"\n    export function scoreDisplay(on: boolean): void {\n        info.setScore(info.score())\n        info.showScore(on)\n    }\n    /**\n    * Shows/hides the life\n    */\n        //% block=\"turn life $on\"\n        //% group=\"Life\"\n        //% on.shadow=\"toggleOnOff\"\n        export function lifeDisplay(on: boolean): void {\n            info.setLife(info.life())\n            info.showLife(on)\n        }\n    /**\n* Shows/hides the countdown\n* Countdown is automatically 0:00 if not previously set\n*/\n    //% block=\"turn countdown $on\"\n    //% group=\"Countdown\"\n    //% on.shadow=\"toggleOnOff\"\n    export function countdown(on: boolean): void {\n        info.startCountdown(info.countdown())\n        info.showCountdown(on)\n    }\n}",
  "main.blocks": "<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"hudSetLife\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"info_plus_setLifeIcon\"><value name=\"lifeImage\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":\"1I9%bs#F9BX$yj-+u3Z=\"}}</data></shadow></value></block></next></block></statement></block></xml>",
  "main.ts": "info.setLife(3)\ninfo.plus.setLifeIcon(img`\n    2 \n    `)\n",
  "pxt.json": "{\n    \"name\": \"Info Plus\",\n    \"description\": \"This extension expands the `INFO` category, giving you the ability to show/hide the stats, change the life image and customize the stat colors.\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"infoPlus.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.30\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n",
  "test.ts": "// tests go here; this will not be compiled when this package is used as an extension.\n",
  "tilemap.g.jres": "{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}",
  "tilemap.g.ts": "// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"
}